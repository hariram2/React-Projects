{"ast":null,"code":"import { useState } from 'react';\nimport html2canvas from 'html2canvas';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * @module Main_Hook\n * Hook return\n * @typedef {Array} HookReturn\n * @property {string} HookReturn[0] - image string\n * @property {string} HookReturn[1] - take screen shot string\n * @property {object} HookReturn[2] - errors\n */\n\n/**\n * hook for creating screenshot from html node\n * @returns {HookReturn}\n */\n\n\nvar useScreenshot = function useScreenshot() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      type = _ref.type,\n      quality = _ref.quality;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n  /**\n   * convert html node to image\n   * @param {HTMLElement} node\n   */\n\n\n  var takeScreenShot = function takeScreenShot(node) {\n    if (!node) {\n      throw new Error('You should provide correct html node.');\n    }\n\n    return html2canvas(node).then(function (canvas) {\n      var croppedCanvas = document.createElement('canvas');\n      var croppedCanvasContext = croppedCanvas.getContext('2d'); // init data\n\n      var cropPositionTop = 0;\n      var cropPositionLeft = 0;\n      var cropWidth = canvas.width;\n      var cropHeight = canvas.height;\n      croppedCanvas.width = cropWidth;\n      croppedCanvas.height = cropHeight;\n      croppedCanvasContext.drawImage(canvas, cropPositionLeft, cropPositionTop);\n      var base64Image = croppedCanvas.toDataURL(type, quality);\n      setImage(base64Image);\n      return base64Image;\n    })[\"catch\"](setError);\n  };\n\n  return [image, takeScreenShot, {\n    error: error\n  }];\n};\n/**\n * creates name of file\n * @param {string} extension\n * @param  {string[]} parts of file name\n */\n\n\nvar createFileName = function createFileName() {\n  var extension = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (!extension) {\n    return '';\n  }\n\n  for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    names[_key - 1] = arguments[_key];\n  }\n\n  return \"\".concat(names.join(''), \".\").concat(extension);\n};\n\nexport { createFileName, useScreenshot };","map":null,"metadata":{},"sourceType":"module"}